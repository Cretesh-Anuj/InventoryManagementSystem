{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/inputtext\";\nexport class LoginComponent {\n  constructor(authService, router, route) {\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.errorMessage = '';\n    this.validateControls = controlName => {\n      return this.loginForm?.get(controlName)?.invalid && this.loginForm?.get(controlName)?.touched;\n    };\n    this.hasError = (controlName, errorName) => {\n      return this.loginForm?.get(controlName)?.hasError(errorName);\n    };\n    this.login = loginFormValues => {\n      debugger;\n      this.showError = false;\n      const formValues = {\n        ...loginFormValues\n      };\n      const user = {\n        username: formValues.username,\n        password: formValues.password\n      };\n      this.authService.loginUser(\"api/Authenticate/login\", user).subscribe({\n        next: res => {\n          localStorage.setItem(\"token\", res.token);\n          this.router.navigate([this.returnUrl]);\n        },\n        error: err => {\n          this.errorMessage = err.message;\n          this.showError = true;\n        }\n      });\n    };\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.required),\n      password: new FormControl('', [Validators.required, Validators.pattern(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&-+=()])(?=\\\\S+$).{8, 20}$\")])\n    });\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 25,\n  vars: 1,\n  consts: [[1, \"login-container\"], [1, \"form\", 2, \"width\", \"50vw\", \"background-color\", \"white\", 3, \"formGroup\"], [1, \"logo-container\", \"text-center\"], [\"src\", \"../../../assets/logo.PNG\", \"alt\", \"logo\", \"height\", \"70\"], [1, \"form-wrapper\", 2, \"max-width\", \"70%\", \"margin\", \"2rem auto\"], [1, \"field\"], [1, \"col-12\"], [\"for\", \"username\", 1, \"font-bold\"], [\"id\", \"username\", \"formControlName\", \"username\", \"type\", \"username\", \"aria-describedby\", \"username-help\", \"pInputText\", \"\", 1, \"w-full\"], [\"hidden\", \"\", \"id\", \"username-help\"], [\"for\", \"password\", 1, \"font-bold\"], [1, \"p-input-icon-right\", \"w-full\"], [1, \"pi\", \"pi-eye\", 2, \"font-size\", \"1.5rem\"], [\"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\", \"aria-describedby\", \"password-help\", \"pInputText\", \"\", 1, \"w-full\"], [\"hidden\", \"\", \"id\", \"password-help\"], [1, \"login-actions\", \"flex\", \"flex-row\", \"justify-content-center\", \"align-items-center\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"label\", \"LOGIN\", 1, \"w-3\", \"border-round-3xl\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"form\", 1)(2, \"section\", 2);\n      i0.ɵɵelement(3, \"img\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"label\", 7);\n      i0.ɵɵtext(8, \"User Name:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵelementStart(11, \"small\", 9);\n      i0.ɵɵtext(12, \"Enter your username!\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 5)(14, \"div\", 6)(15, \"label\", 10);\n      i0.ɵɵtext(16, \"Password:\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 6)(18, \"span\", 11);\n      i0.ɵɵelement(19, \"i\", 12)(20, \"input\", 13);\n      i0.ɵɵelementStart(21, \"small\", 14);\n      i0.ɵɵtext(22, \"Enter your Password!\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(23, \"div\", 15)(24, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_24_listener() {\n        return ctx.login(ctx.loginForm.value);\n      });\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.ButtonDirective, i5.InputText],\n  styles: [\"[_nghost-%COMP%] {\\r\\n  position: absolute;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  bottom: 0;\\r\\n  top: 0;\\r\\n}\\r\\n.login-container[_ngcontent-%COMP%]{\\r\\n  width: 100vw;\\r\\n  height: 100vh;\\r\\n  display: grid;\\r\\n  place-content: center;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aGVudGljYXRpb24vbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixPQUFPO0VBQ1AsUUFBUTtFQUNSLFNBQVM7RUFDVCxNQUFNO0FBQ1I7QUFDQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2IsYUFBYTtFQUNiLHFCQUFxQjtBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogMDtcclxuICByaWdodDogMDtcclxuICBib3R0b206IDA7XHJcbiAgdG9wOiAwO1xyXG59XHJcbi5sb2dpbi1jb250YWluZXJ7XHJcbiAgd2lkdGg6IDEwMHZ3O1xyXG4gIGhlaWdodDogMTAwdmg7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;AAanE,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,KAAqB;IAA/E,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;IAHlF,iBAAY,GAAW,EAAE;IAYnB,qBAAgB,GAAIC,WAAkB,IAAG;MAC9C,OAAO,IAAI,CAACC,SAAS,EAAEC,GAAG,CAACF,WAAW,CAAC,EAAEG,OAAO,IAAI,IAAI,CAACF,SAAS,EAAEC,GAAG,CAACF,WAAW,CAAC,EAAEI,OAAO;IAC/F,CAAC;IACM,aAAQ,GAAG,CAACJ,WAAmB,EAAEK,SAAiB,KAAG;MAC1D,OAAO,IAAI,CAACJ,SAAS,EAAEC,GAAG,CAACF,WAAW,CAAC,EAAEM,QAAQ,CAACD,SAAS,CAAC;IAC9D,CAAC;IACM,UAAK,GAAIE,eAAoB,IAAG;MACrC;MACA,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,MAAMC,UAAU,GAAG;QAAC,GAAGF;MAAe,CAAC;MACtC,MAAMG,IAAI,GAA6B;QACtCC,QAAQ,EAAEF,UAAU,CAACE,QAAQ;QAC7BC,QAAQ,EAAEH,UAAU,CAACG;OACrB;MACD,IAAI,CAACf,WAAW,CAACgB,SAAS,CAAC,wBAAwB,EAAEH,IAAI,CAAC,CAACI,SAAS,CAAC;QACpEC,IAAI,EAAGC,GAAoB,IAAG;UAC5BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;UACxC,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,IAAI,CAACC,SAAS,CAAC,CAAC;QACvC,CAAC;QACFC,KAAK,EAAGC,GAAqB,IAAG;UAC9B,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACE,OAAO;UAC/B,IAAI,CAACjB,SAAS,GAAG,IAAI;QACvB;OACA,CAAC;IACL,CAAC;EAjCsG;EAEvGkB,QAAQ;IACL,IAAI,CAACzB,SAAS,GAAG,IAAIR,SAAS,CAAC;MAC9BkB,QAAQ,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACiC,QAAQ,CAAC;MAClDf,QAAQ,EAAE,IAAIpB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACiC,QAAQ,EAAEjC,UAAU,CAACkC,OAAO,CAAC,yEAAyE,CAAC,CAAC;KAClJ,CAAC;IACF,IAAI,CAACP,SAAS,GAAG,IAAI,CAACtB,KAAK,CAAC8B,QAAQ,CAACC,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG;EACvE;;AAdWnC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAoC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCf3BC,+BAA8B;MAG1BA,yBAA2D;MAC7DA,iBAAU;MACVA,8BAAqE;MAGvBA,0BAAU;MAAAA,iBAAQ;MAE3DA,8BAAoB;MACnBA,4BAA2H;MAC3HA,iCAAiC;MAAAA,qCAAoB;MAAAA,iBAAQ;MAGjEA,+BAAmB;MAEyBA,0BAAS;MAAAA,iBAAQ;MAE1DA,+BAAoB;MAEjBA,yBAAoD;MAEpDA,kCAAiC;MAAAA,qCAAoB;MAAAA,iBAAQ;MAInEA,gCAAmF;MACzEA;QAAA,OAASC,8BAAsB;MAAA,EAAC;MAA0ED,iBAAS;;;MA3B3HA,eAAuB;MAAvBA,yCAAuB","names":["FormControl","FormGroup","Validators","LoginComponent","constructor","authService","router","route","controlName","loginForm","get","invalid","touched","errorName","hasError","loginFormValues","showError","formValues","user","username","password","loginUser","subscribe","next","res","localStorage","setItem","token","navigate","returnUrl","error","err","errorMessage","message","ngOnInit","required","pattern","snapshot","queryParams","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\anuj.sharma\\InventoryManagementSystem\\src\\app\\authentication\\login\\login.component.ts","C:\\Users\\anuj.sharma\\InventoryManagementSystem\\src\\app\\authentication\\login\\login.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthResponseDTO } from 'src/models/AuthResponseDTO';\nimport { UserForAuthenticationDTO } from 'src/models/UserForAuthenticationDTO';\nimport { AuthService } from 'src/services/auth.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  private returnUrl!: string;\n  loginForm!: FormGroup;\n   errorMessage: string = '';\n   showError!: boolean;\n\n  constructor(private authService: AuthService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n     this.loginForm = new FormGroup({\n      username: new FormControl('', Validators.required),\n      password: new FormControl('', [Validators.required, Validators.pattern(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&-+=()])(?=\\\\S+$).{8, 20}$\")]),\n     })\n     this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  public validateControls = (controlName:string)=>{\n    return this.loginForm?.get(controlName)?.invalid && this.loginForm?.get(controlName)?.touched\n  }\n  public hasError = (controlName: string, errorName: string)=> {\n    return this.loginForm?.get(controlName)?.hasError(errorName);\n  }\n  public login = (loginFormValues: any)=>{\n    debugger;\n    this.showError = false;\n    const formValues = {...loginFormValues};\n     const user: UserForAuthenticationDTO = {\n      username: formValues.username,\n      password: formValues.password\n     };\n     this.authService.loginUser(\"api/Authenticate/login\", user).subscribe({\n      next: (res: AuthResponseDTO)=> {\n        localStorage.setItem(\"token\", res.token);\n        this.router.navigate([this.returnUrl]);\n       },\n      error: (err:HttpErrorResponse)=> {\n        this.errorMessage = err.message;\n        this.showError = true\n      }\n     })\n  }\n}\n","<main class=\"login-container\">\n<form [formGroup]=\"loginForm\" class=\"form\"  style=\"width: 50vw; background-color: white;\">\n  <section class=\"logo-container text-center\">\n    <img src=\"../../../assets/logo.PNG\" alt=\"logo\" height=\"70\">\n  </section>\n  <div class=\"form-wrapper\" style=\"max-width: 70%; margin: 2rem auto;\">\n    <div class=\"field\">\n      <div class=\"col-12\">\n        <label for=\"username\" class=\"font-bold\">User Name:</label>\n      </div>\n       <div class=\"col-12\">\n        <input id=\"username\" formControlName=\"username\" type=\"username\" class=\"w-full\" aria-describedby=\"username-help\" pInputText>\n        <small hidden id=\"username-help\">Enter your username!</small>\n       </div>\n    </div>\n    <div class=\"field\">\n      <div class=\"col-12\">\n        <label for=\"password\" class=\"font-bold\">Password:</label>\n      </div>\n       <div class=\"col-12\">\n        <span class=\"p-input-icon-right w-full\">\n          <i class=\"pi pi-eye\" style=\"font-size: 1.5rem;\"></i>\n          <input id=\"password\" formControlName=\"password\" type=\"password\" class=\"w-full\" aria-describedby=\"password-help\" pInputText>\n          <small hidden id=\"password-help\">Enter your Password!</small>\n        </span>\n       </div>\n    </div>\n    <div class=\"login-actions flex flex-row justify-content-center align-items-center\">\n      <button (click)=\"login(loginForm.value)\" pButton pRipple type=\"button\" label=\"LOGIN\" class=\"w-3 border-round-3xl\"></button>\n    </div>\n\n  </div>\n</form>\n</main>\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}